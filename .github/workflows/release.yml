name: Create Windows Executable

on:
  push:
    tags:
      - 'v*.*.*'  # This pattern matches tags like 'v1.0.3'

jobs:
  build-exe:
    runs-on: windows-latest  # Use latest Windows runner to create Windows executable
    permissions:
      contents: write  # Needed to create and upload releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Check out code from the repository

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # Use downgraded Python version (must include distutils module)

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r app/requirements.txt  # Install dependencies from requirements.txt

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile app/cli_main.py
          # Extract version number and add it to the output executable
          $tag = "${env:GITHUB_REF}"
          $version = $tag -replace 'refs/tags/', ''
          $exeName = "tableau-workbook-extractor-$version.exe"
          Rename-Item -Path dist\cli_main.exe -NewName $exeName
          # Make exe file name and version available for the next step as well
          echo "EXE_NAME=$exeName" >> $env:GITHUB_ENV
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/${{env.EXE_NAME}} # Path to the executable to upload
          token: ${{secrets.GITHUB_TOKEN}}  # Use the built-in GITHUB_TOKEN
          allowUpdates: true # Update a release if it already exists
  deploy-flask:
    runs-on: ubuntu-latest  # The job will run on the latest Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Check out the code from the repository

    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}  # API key for Render, stored in GitHub Secrets
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }} # Render app service ID
      run: |
        # Authenticate with Render API
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"branch": "main"}'  # Trigger deployment for the main branch
  # note: make sure that the gh-pages branch is created beforehand and that docs/build isn't ignored
  build-docs:
    runs-on: ubuntu-latest  # Use Ubuntu for building documentation
    #needs: build-exe  # Ensure the executable build is complete before this step
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Check out code from the repository

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r app/requirements.txt  # Install dependencies from requirements.txt

      - name: Set version in conf.py
        run: |
          tag=${{env.VERSION}}
          # If it's a tag, temporarily update the version in conf.py
          if [ -n "$tag" ]; then
            echo "Temporarily setting version to tag: $tag"
            # Use sed to find the version line and update it to the tag
            sed -i "s/^version = .*/version = '$tag'/" docs/source/conf.py
          else
            echo "Using default version 'latest'"
            # Ensure version is set to 'latest' for non-tag builds (if it isn't already)
            if ! grep -q "version = 'latest'" docs/source/conf.py; then
              echo "version = 'latest'" >> docs/source/conf.py  # Append if it doesn't exist
            fi
          fi

      - name: Build documentation
        run: |
          sphinx-multiversion docs/source docs/build/html  # Build documentation with versioning

      - name: Deploy documentation
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/build/html
          git commit -m "Update documentation for version ${tag:-latest}"  # Use 'latest' if tag is empty
          git push origin gh-pages  # Push to gh-pages branch
